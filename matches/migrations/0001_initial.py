# Generated by Django 5.2.3 on 2025-09-11 18:31

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('leagues', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ModelVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('kind', models.CharField(blank=True, max_length=32, null=True)),
                ('league_id', models.IntegerField(blank=True, null=True)),
                ('trained_until', models.DateTimeField(blank=True, null=True)),
                ('metrics_json', models.TextField(blank=True, null=True)),
                ('file_home', models.CharField(blank=True, max_length=256, null=True)),
                ('file_away', models.CharField(blank=True, max_length=256, null=True)),
                ('calibration_json', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('firstname', models.CharField(blank=True, max_length=64, null=True)),
                ('lastname', models.CharField(blank=True, max_length=64, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=64, null=True)),
                ('height_cm', models.IntegerField(blank=True, null=True)),
                ('weight_kg', models.FloatField(blank=True, null=True)),
                ('photo_url', models.URLField(blank=True, max_length=500, null=True)),
                ('raw_json', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('city', models.CharField(blank=True, max_length=128, null=True)),
                ('country', models.CharField(blank=True, max_length=64, null=True)),
                ('address', models.CharField(blank=True, max_length=256, null=True)),
                ('capacity', models.IntegerField(blank=True, null=True)),
                ('surface', models.CharField(blank=True, max_length=64, null=True)),
                ('image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('built', models.IntegerField(blank=True, null=True)),
                ('raw_json', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DailyTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league_id', models.IntegerField(db_index=True)),
                ('ticket_date', models.DateField(db_index=True)),
                ('selections', models.JSONField(default=list)),
                ('legs', models.IntegerField(default=0)),
                ('acc_fair_odds', models.FloatField(blank=True, null=True)),
                ('acc_bookish_odds', models.FloatField(blank=True, null=True)),
                ('acc_probability', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('won', 'Won'), ('lost', 'Lost'), ('void', 'Void')], default='pending', max_length=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-ticket_date', '-created_at'],
                'unique_together': {('league_id', 'ticket_date')},
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('season', models.IntegerField()),
                ('kickoff_utc', models.DateTimeField()),
                ('status', models.CharField(choices=[('NS', 'Not started'), ('1H', '1st Half'), ('HT', 'Half-time'), ('2H', '2nd Half'), ('ET', 'Extra time'), ('P', 'Penalties'), ('FT', 'Full-time'), ('AET', 'After extra time'), ('PEN', 'Penalties (final)'), ('PST', 'Postponed'), ('ABD', 'Abandoned'), ('SUSP', 'Suspended'), ('INT', 'Interrupted')], default='NS', max_length=8)),
                ('goals_home', models.SmallIntegerField(blank=True, null=True)),
                ('goals_away', models.SmallIntegerField(blank=True, null=True)),
                ('corners_home', models.SmallIntegerField(blank=True, null=True)),
                ('corners_away', models.SmallIntegerField(blank=True, null=True)),
                ('cards_home', models.SmallIntegerField(blank=True, null=True)),
                ('cards_away', models.SmallIntegerField(blank=True, null=True)),
                ('raw_result_json', models.JSONField(blank=True, null=True)),
                ('away', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='away_matches', to='leagues.team')),
                ('home', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='home_matches', to='leagues.team')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='matches', to='leagues.league')),
            ],
        ),
        migrations.CreateModel(
            name='Lineup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formation', models.CharField(blank=True, max_length=32, null=True)),
                ('starters_json', models.JSONField()),
                ('bench_json', models.JSONField(blank=True, null=True)),
                ('xi_strength', models.FloatField(blank=True, null=True)),
                ('xi_changes', models.SmallIntegerField(blank=True, null=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lineups', to='leagues.team')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lineups', to='matches.match')),
            ],
        ),
        migrations.CreateModel(
            name='FeaturesSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts_mode', models.CharField(choices=[('T24', 'T minus 24h'), ('T60', 'T minus 60m')], default='T24', max_length=8)),
                ('features_json', models.JSONField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feature_snapshots', to='matches.match')),
            ],
        ),
        migrations.CreateModel(
            name='CornerPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league_id', models.IntegerField()),
                ('season', models.IntegerField()),
                ('kickoff_utc', models.DateTimeField()),
                ('lambda_home', models.FloatField()),
                ('lambda_away', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='matches.match')),
            ],
        ),
        migrations.CreateModel(
            name='CardPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league_id', models.IntegerField()),
                ('season', models.IntegerField()),
                ('kickoff_utc', models.DateTimeField()),
                ('lambda_home', models.FloatField()),
                ('lambda_away', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='matches.match')),
            ],
        ),
        migrations.CreateModel(
            name='MatchPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league_id', models.IntegerField(db_index=True)),
                ('season', models.IntegerField(db_index=True)),
                ('kickoff_utc', models.DateTimeField(db_index=True)),
                ('alpha', models.FloatField(default=0.7, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('lambda_home', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lambda_away', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lambda_corners_home', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lambda_corners_away', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lambda_cards_home', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lambda_cards_away', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lambda_yellows_home', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lambda_yellows_away', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('prob_home', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('prob_draw', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('prob_away', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('prob_over25', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('prob_btts', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('markets_json', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='prediction', to='matches.match')),
            ],
            options={
                'verbose_name': 'Match Prediction',
                'verbose_name_plural': 'Match Predictions',
                'ordering': ['kickoff_utc'],
            },
        ),
        migrations.CreateModel(
            name='MatchStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shots', models.IntegerField(blank=True, null=True)),
                ('sot', models.IntegerField(blank=True, null=True)),
                ('possession_pct', models.FloatField(blank=True, null=True)),
                ('pass_acc_pct', models.FloatField(blank=True, null=True)),
                ('corners', models.IntegerField(blank=True, null=True)),
                ('cards', models.IntegerField(blank=True, null=True)),
                ('xg', models.FloatField(blank=True, null=True)),
                ('pens_won', models.IntegerField(blank=True, null=True)),
                ('pens_conceded', models.IntegerField(blank=True, null=True)),
                ('reds', models.IntegerField(blank=True, null=True)),
                ('yellows', models.IntegerField(blank=True, null=True)),
                ('shots_off', models.IntegerField(blank=True, null=True)),
                ('shots_blocked', models.IntegerField(blank=True, null=True)),
                ('shots_in_box', models.IntegerField(blank=True, null=True)),
                ('shots_out_box', models.IntegerField(blank=True, null=True)),
                ('fouls', models.IntegerField(blank=True, null=True)),
                ('offsides', models.IntegerField(blank=True, null=True)),
                ('saves', models.IntegerField(blank=True, null=True)),
                ('passes_total', models.IntegerField(blank=True, null=True)),
                ('passes_accurate', models.IntegerField(blank=True, null=True)),
                ('stats_json', models.JSONField(blank=True, default=dict)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='matches.match')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='match_stats', to='leagues.team')),
            ],
        ),
        migrations.CreateModel(
            name='MLTrainingMatch',
            fields=[
                ('fixture_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('league_id', models.IntegerField()),
                ('season', models.IntegerField()),
                ('kickoff_utc', models.DateTimeField()),
                ('home_team_id', models.IntegerField()),
                ('away_team_id', models.IntegerField()),
                ('ts_cutoff', models.DateTimeField()),
                ('data_quality_score', models.FloatField(blank=True, null=True)),
                ('league_cluster', models.CharField(blank=True, max_length=32, null=True)),
                ('has_xg', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('y_home_goals_90', models.SmallIntegerField(blank=True, null=True)),
                ('y_away_goals_90', models.SmallIntegerField(blank=True, null=True)),
                ('y_home_corners_90', models.SmallIntegerField(blank=True, null=True)),
                ('y_away_corners_90', models.SmallIntegerField(blank=True, null=True)),
                ('y_home_cards_90', models.SmallIntegerField(blank=True, null=True)),
                ('y_away_cards_90', models.SmallIntegerField(blank=True, null=True)),
                ('h_gf10', models.FloatField(blank=True, null=True)),
                ('h_ga10', models.FloatField(blank=True, null=True)),
                ('h_gd10', models.FloatField(blank=True, null=True)),
                ('h_sot10', models.FloatField(blank=True, null=True)),
                ('h_conv10', models.FloatField(blank=True, null=True)),
                ('h_sot_pct10', models.FloatField(blank=True, null=True)),
                ('h_poss10', models.FloatField(blank=True, null=True)),
                ('h_corners_for10', models.FloatField(blank=True, null=True)),
                ('h_cards_for10', models.FloatField(blank=True, null=True)),
                ('h_clean_sheets10', models.FloatField(blank=True, null=True)),
                ('a_gf10', models.FloatField(blank=True, null=True)),
                ('a_ga10', models.FloatField(blank=True, null=True)),
                ('a_gd10', models.FloatField(blank=True, null=True)),
                ('a_sot10', models.FloatField(blank=True, null=True)),
                ('a_conv10', models.FloatField(blank=True, null=True)),
                ('a_sot_pct10', models.FloatField(blank=True, null=True)),
                ('a_poss10', models.FloatField(blank=True, null=True)),
                ('a_corners_for10', models.FloatField(blank=True, null=True)),
                ('a_cards_for10', models.FloatField(blank=True, null=True)),
                ('a_clean_sheets10', models.FloatField(blank=True, null=True)),
                ('h_home_gf10', models.FloatField(blank=True, null=True)),
                ('a_away_gf10', models.FloatField(blank=True, null=True)),
                ('h_rest_days', models.FloatField(blank=True, null=True)),
                ('a_rest_days', models.FloatField(blank=True, null=True)),
                ('h_matches_14d', models.SmallIntegerField(blank=True, null=True)),
                ('a_matches_14d', models.SmallIntegerField(blank=True, null=True)),
                ('d_gf10', models.FloatField(blank=True, null=True)),
                ('d_sot10', models.FloatField(blank=True, null=True)),
                ('d_rest_days', models.FloatField(blank=True, null=True)),
                ('h_stats_missing', models.BooleanField(default=False)),
                ('a_stats_missing', models.BooleanField(default=False)),
                ('stats10_json', models.JSONField(blank=True, default=dict)),
                ('stats5_json', models.JSONField(blank=True, default=dict)),
                ('built_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('feature_version', models.CharField(blank=True, max_length=16, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['league_id', 'season'], name='matches_mlt_league__a57612_idx'), models.Index(fields=['kickoff_utc'], name='matches_mlt_kickoff_451edf_idx'), models.Index(fields=['home_team_id'], name='matches_mlt_home_te_56ecd4_idx'), models.Index(fields=['away_team_id'], name='matches_mlt_away_te_c8e1a5_idx')],
            },
        ),
        migrations.CreateModel(
            name='MarketProb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league_id', models.IntegerField()),
                ('season', models.IntegerField()),
                ('kickoff_utc', models.DateTimeField()),
                ('market', models.CharField(max_length=32)),
                ('outcome', models.CharField(max_length=32)),
                ('period', models.CharField(choices=[('FT', 'Full Time'), ('1H', 'First Half'), ('2H', 'Second Half')], default='FT', max_length=2)),
                ('line', models.FloatField(blank=True, null=True)),
                ('prob_raw', models.FloatField()),
                ('prob_calibrated', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fixture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.match')),
                ('model_version', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='matches.modelversion')),
            ],
        ),
        migrations.CreateModel(
            name='Injury',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fixture_id', models.IntegerField()),
                ('type', models.CharField(blank=True, max_length=120, null=True)),
                ('reason', models.CharField(blank=True, max_length=200, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('raw_json', models.JSONField(default=dict)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leagues.team')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerSeason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.IntegerField()),
                ('number', models.IntegerField(blank=True, null=True)),
                ('position', models.CharField(blank=True, max_length=32, null=True)),
                ('injured', models.BooleanField(default=False)),
                ('appearances', models.IntegerField(blank=True, null=True)),
                ('minutes', models.IntegerField(blank=True, null=True)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('goals', models.IntegerField(blank=True, null=True)),
                ('assists', models.IntegerField(blank=True, null=True)),
                ('yellows', models.IntegerField(blank=True, null=True)),
                ('reds', models.IntegerField(blank=True, null=True)),
                ('raw_json', models.JSONField(blank=True, default=dict, null=True)),
                ('shots_total', models.IntegerField(blank=True, null=True)),
                ('shots_on', models.IntegerField(blank=True, null=True)),
                ('cards_yellow', models.IntegerField(blank=True, null=True)),
                ('cards_red', models.IntegerField(blank=True, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='matches.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='leagues.team')),
            ],
        ),
        migrations.CreateModel(
            name='PredictedMarket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_code', models.CharField(max_length=64)),
                ('specifier', models.CharField(blank=True, max_length=32, null=True)),
                ('p_model', models.FloatField()),
                ('fair_odds', models.FloatField()),
                ('book_odds', models.FloatField(blank=True, null=True)),
                ('edge', models.FloatField(blank=True, null=True)),
                ('kickoff_utc', models.DateTimeField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('lambda_home', models.FloatField(blank=True, null=True)),
                ('lambda_away', models.FloatField(blank=True, null=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='predicted_markets', to='leagues.league')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predicted_markets', to='matches.match')),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts_mode', models.CharField(choices=[('T24', 'T minus 24h'), ('T60', 'T minus 60m')], default='T24', max_length=8)),
                ('goals_base_json', models.JSONField()),
                ('corners_base_json', models.JSONField(blank=True, null=True)),
                ('cards_base_json', models.JSONField(blank=True, null=True)),
                ('markets_json', models.JSONField()),
                ('explain_json', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='matches.match')),
                ('model_ver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='predictions', to='matches.modelversion')),
            ],
        ),
        migrations.CreateModel(
            name='StandingsRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league_id', models.IntegerField()),
                ('season', models.IntegerField()),
                ('group_name', models.CharField(blank=True, max_length=80, null=True)),
                ('rank', models.IntegerField()),
                ('played', models.IntegerField(default=0)),
                ('win', models.IntegerField(default=0)),
                ('draw', models.IntegerField(default=0)),
                ('loss', models.IntegerField(default=0)),
                ('gf', models.IntegerField(default=0)),
                ('ga', models.IntegerField(default=0)),
                ('gd', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=0)),
                ('form', models.CharField(blank=True, max_length=20, null=True)),
                ('last5_json', models.JSONField(default=dict)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leagues.team')),
            ],
        ),
        migrations.CreateModel(
            name='TeamRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league_id', models.IntegerField(db_index=True)),
                ('season', models.IntegerField(db_index=True)),
                ('team_id', models.IntegerField(db_index=True)),
                ('attack', models.FloatField(default=0.0)),
                ('defense', models.FloatField(default=0.0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('league_id', 'season', 'team_id')},
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('fee', models.CharField(blank=True, max_length=80, null=True)),
                ('raw_json', models.JSONField(default=dict)),
                ('from_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='out_transfers', to='leagues.team')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.player')),
                ('to_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='in_transfers', to='leagues.team')),
            ],
        ),
        migrations.CreateModel(
            name='Trophy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league', models.CharField(max_length=120)),
                ('country', models.CharField(blank=True, max_length=80, null=True)),
                ('place', models.CharField(blank=True, max_length=80, null=True)),
                ('season', models.CharField(blank=True, max_length=40, null=True)),
                ('raw_json', models.JSONField(default=dict)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.player')),
            ],
        ),
        migrations.CreateModel(
            name='UserDailyTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_date', models.DateField(db_index=True)),
                ('kind', models.CharField(default='TWO_ODDS', max_length=24)),
                ('selections', models.JSONField(blank=True, default=list)),
                ('legs', models.IntegerField(default=0)),
                ('acc_probability', models.FloatField(blank=True, null=True)),
                ('acc_fair_odds', models.FloatField(blank=True, null=True)),
                ('acc_bookish_odds', models.FloatField(blank=True, null=True)),
                ('build_params', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('won', 'Won'), ('lost', 'Lost'), ('void', 'Void'), ('empty', 'Empty')], default='pending', max_length=12)),
                ('source', models.CharField(default='custom', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-ticket_date', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['league', 'season'], name='matches_mat_league__e96dcb_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['kickoff_utc'], name='matches_mat_kickoff_1f6c32_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['status'], name='matches_mat_status_a896a5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lineup',
            unique_together={('match', 'team')},
        ),
        migrations.AlterUniqueTogether(
            name='featuressnapshot',
            unique_together={('match', 'ts_mode')},
        ),
        migrations.AddIndex(
            model_name='matchprediction',
            index=models.Index(fields=['league_id', 'kickoff_utc'], name='matches_mat_league__2793bf_idx'),
        ),
        migrations.AddIndex(
            model_name='matchprediction',
            index=models.Index(fields=['season', 'league_id'], name='matches_mat_season_069cf7_idx'),
        ),
        migrations.AddConstraint(
            model_name='matchprediction',
            constraint=models.CheckConstraint(condition=models.Q(('lambda_home__gte', 0.0), ('lambda_away__gte', 0.0)), name='mp_lambda_goals_nonneg'),
        ),
        migrations.AddConstraint(
            model_name='matchprediction',
            constraint=models.CheckConstraint(condition=models.Q(('prob_home__gte', 0.0), ('prob_home__lte', 1.0), ('prob_draw__gte', 0.0), ('prob_draw__lte', 1.0), ('prob_away__gte', 0.0), ('prob_away__lte', 1.0), ('prob_over25__gte', 0.0), ('prob_over25__lte', 1.0), ('prob_btts__gte', 0.0), ('prob_btts__lte', 1.0)), name='mp_probs_in_0_1'),
        ),
        migrations.AddIndex(
            model_name='matchstats',
            index=models.Index(fields=['team'], name='matches_mat_team_id_db408d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='matchstats',
            unique_together={('match', 'team')},
        ),
        migrations.AlterUniqueTogether(
            name='marketprob',
            unique_together={('fixture', 'model_version', 'market', 'outcome', 'period', 'line')},
        ),
        migrations.AddIndex(
            model_name='injury',
            index=models.Index(fields=['team'], name='matches_inj_team_id_ef204a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='injury',
            unique_together={('fixture_id', 'player')},
        ),
        migrations.AddIndex(
            model_name='playerseason',
            index=models.Index(fields=['team', 'season'], name='matches_pla_team_id_081774_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playerseason',
            unique_together={('player', 'team', 'season')},
        ),
        migrations.AddIndex(
            model_name='predictedmarket',
            index=models.Index(fields=['kickoff_utc'], name='matches_pre_kickoff_007d7a_idx'),
        ),
        migrations.AddIndex(
            model_name='predictedmarket',
            index=models.Index(fields=['league', 'market_code'], name='matches_pre_league__d257b4_idx'),
        ),
        migrations.AddIndex(
            model_name='predictedmarket',
            index=models.Index(fields=['p_model'], name='matches_pre_p_model_9eaf2c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='prediction',
            unique_together={('match', 'ts_mode', 'model_ver')},
        ),
        migrations.AddIndex(
            model_name='standingsrow',
            index=models.Index(fields=['league_id', 'season'], name='matches_sta_league__059843_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='standingsrow',
            unique_together={('league_id', 'season', 'group_name', 'team')},
        ),
        migrations.AddIndex(
            model_name='transfer',
            index=models.Index(fields=['to_team', 'date'], name='matches_tra_to_team_039428_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='transfer',
            unique_together={('player', 'date', 'to_team')},
        ),
        migrations.AddIndex(
            model_name='trophy',
            index=models.Index(fields=['player', 'league'], name='matches_tro_player__495174_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userdailyticket',
            unique_together={('user', 'ticket_date', 'kind')},
        ),
    ]
